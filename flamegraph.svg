<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="114"><g><title>0x1147cf15f (1 samples, 0.88%)</title><rect x="0.0000%" y="693" width="0.8772%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>0x11480355b (1 samples, 0.88%)</title><rect x="0.0000%" y="677" width="0.8772%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>0x114803d88 (1 samples, 0.88%)</title><rect x="0.0000%" y="661" width="0.8772%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>0x1148440ed (1 samples, 0.88%)</title><rect x="0.0000%" y="645" width="0.8772%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>0x1148417f4 (1 samples, 0.88%)</title><rect x="0.0000%" y="629" width="0.8772%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>0x114844356 (1 samples, 0.88%)</title><rect x="0.0000%" y="613" width="0.8772%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>0x114804d96 (1 samples, 0.88%)</title><rect x="0.0000%" y="597" width="0.8772%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>0x1147f3390 (1 samples, 0.88%)</title><rect x="0.0000%" y="581" width="0.8772%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>0x1147f358f (1 samples, 0.88%)</title><rect x="0.0000%" y="565" width="0.8772%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>0x1147f3a7f (1 samples, 0.88%)</title><rect x="0.0000%" y="549" width="0.8772%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>0x7ff806935f49 (1 samples, 0.88%)</title><rect x="0.8772%" y="677" width="0.8772%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="1.1272%" y="687.50"></text></g><g><title>dyld4::LibSystemHelpersWrapper::exit(int) const (1 samples, 0.88%)</title><rect x="1.7544%" y="677" width="0.8772%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="2.0044%" y="687.50"></text></g><g><title>dyld4::LibSystemHelpersWrapper::exit(int) const::&apos;lambda&apos;()::operator()() const (1 samples, 0.88%)</title><rect x="1.7544%" y="661" width="0.8772%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="2.0044%" y="671.50"></text></g><g><title>dyld4::LibSystemHelpers::exit(int) const (1 samples, 0.88%)</title><rect x="1.7544%" y="645" width="0.8772%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="2.0044%" y="655.50"></text></g><g><title>exit (1 samples, 0.88%)</title><rect x="1.7544%" y="629" width="0.8772%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="2.0044%" y="639.50"></text></g><g><title>std::__1::unique_ptr&lt;CoreDisplay::IOBacklightWrapper, std::__1::default_delete&lt;CoreDisplay::IOBacklightWrapper&gt;&gt;::reset[abi:ne190102](CoreDisplay::IOBacklightWrapper*) (1 samples, 0.88%)</title><rect x="1.7544%" y="613" width="0.8772%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="2.0044%" y="623.50"></text></g><g><title>dyld3::kdebug_trace_dyld_image(unsigned int, char const*, unsigned char const (*) [16], fsobj_id, fsid, void const*, unsigned int) (1 samples, 0.88%)</title><rect x="3.5088%" y="645" width="0.8772%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="3.7588%" y="655.50"></text></g><g><title>dyld3::kdebug_trace_dyld_region(unsigned int, int, int, char const*, unsigned char const (*) [16], fsobj_id, fsid, void const*) (1 samples, 0.88%)</title><rect x="3.5088%" y="629" width="0.8772%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="3.7588%" y="639.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.88%)</title><rect x="4.3860%" y="533" width="0.8772%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="4.6360%" y="543.50"></text></g><g><title>dyld4::RuntimeState::notifyObjCInit(dyld4::Loader const*) (1 samples, 0.88%)</title><rect x="4.3860%" y="517" width="0.8772%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="4.6360%" y="527.50"></text></g><g><title>load_images (1 samples, 0.88%)</title><rect x="4.3860%" y="501" width="0.8772%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="4.6360%" y="511.50"></text></g><g><title>objc_msgSend (1 samples, 0.88%)</title><rect x="4.3860%" y="485" width="0.8772%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="4.6360%" y="495.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (2 samples, 1.75%)</title><rect x="4.3860%" y="581" width="1.7544%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="2"/><text x="4.6360%" y="591.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (2 samples, 1.75%)</title><rect x="4.3860%" y="565" width="1.7544%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="2"/><text x="4.6360%" y="575.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (2 samples, 1.75%)</title><rect x="4.3860%" y="549" width="1.7544%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="2"/><text x="4.6360%" y="559.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.88%)</title><rect x="5.2632%" y="533" width="0.8772%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="5.5132%" y="543.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.88%)</title><rect x="5.2632%" y="517" width="0.8772%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="5.5132%" y="527.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.88%)</title><rect x="5.2632%" y="501" width="0.8772%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="1"/><text x="5.5132%" y="511.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.88%)</title><rect x="5.2632%" y="485" width="0.8772%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="1"/><text x="5.5132%" y="495.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.88%)</title><rect x="5.2632%" y="469" width="0.8772%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="1"/><text x="5.5132%" y="479.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.88%)</title><rect x="5.2632%" y="453" width="0.8772%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="1"/><text x="5.5132%" y="463.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.88%)</title><rect x="5.2632%" y="437" width="0.8772%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="1"/><text x="5.5132%" y="447.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.88%)</title><rect x="5.2632%" y="421" width="0.8772%" height="15" fill="rgb(213,181,19)" fg:x="6" fg:w="1"/><text x="5.5132%" y="431.50"></text></g><g><title>dyld3::ScopedTimer::startTimer() (1 samples, 0.88%)</title><rect x="5.2632%" y="405" width="0.8772%" height="15" fill="rgb(254,191,54)" fg:x="6" fg:w="1"/><text x="5.5132%" y="415.50"></text></g><g><title>__kdebug_trace64 (1 samples, 0.88%)</title><rect x="5.2632%" y="389" width="0.8772%" height="15" fill="rgb(241,83,37)" fg:x="6" fg:w="1"/><text x="5.5132%" y="399.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const (3 samples, 2.63%)</title><rect x="4.3860%" y="629" width="2.6316%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="3"/><text x="4.6360%" y="639.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const::$_0::operator()() const (3 samples, 2.63%)</title><rect x="4.3860%" y="613" width="2.6316%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="3"/><text x="4.6360%" y="623.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (3 samples, 2.63%)</title><rect x="4.3860%" y="597" width="2.6316%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="3"/><text x="4.6360%" y="607.50">dy..</text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.88%)</title><rect x="6.1404%" y="581" width="0.8772%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="1"/><text x="6.3904%" y="591.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.88%)</title><rect x="6.1404%" y="565" width="0.8772%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="1"/><text x="6.3904%" y="575.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.88%)</title><rect x="6.1404%" y="549" width="0.8772%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="1"/><text x="6.3904%" y="559.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.88%)</title><rect x="6.1404%" y="533" width="0.8772%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="1"/><text x="6.3904%" y="543.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.88%)</title><rect x="6.1404%" y="517" width="0.8772%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="1"/><text x="6.3904%" y="527.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.88%)</title><rect x="6.1404%" y="501" width="0.8772%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="1"/><text x="6.3904%" y="511.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.88%)</title><rect x="6.1404%" y="485" width="0.8772%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="1"/><text x="6.3904%" y="495.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.88%)</title><rect x="6.1404%" y="469" width="0.8772%" height="15" fill="rgb(206,96,30)" fg:x="7" fg:w="1"/><text x="6.3904%" y="479.50"></text></g><g><title>dyld3::ScopedTimer::startTimer() (1 samples, 0.88%)</title><rect x="6.1404%" y="453" width="0.8772%" height="15" fill="rgb(218,138,4)" fg:x="7" fg:w="1"/><text x="6.3904%" y="463.50"></text></g><g><title>__kdebug_trace64 (1 samples, 0.88%)</title><rect x="6.1404%" y="437" width="0.8772%" height="15" fill="rgb(250,191,14)" fg:x="7" fg:w="1"/><text x="6.3904%" y="447.50"></text></g><g><title>__pthread_init (1 samples, 0.88%)</title><rect x="7.0175%" y="485" width="0.8772%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="1"/><text x="7.2675%" y="495.50"></text></g><g><title>host_info (1 samples, 0.88%)</title><rect x="7.0175%" y="469" width="0.8772%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="1"/><text x="7.2675%" y="479.50"></text></g><g><title>mach_msg2_trap (1 samples, 0.88%)</title><rect x="7.0175%" y="453" width="0.8772%" height="15" fill="rgb(225,35,8)" fg:x="8" fg:w="1"/><text x="7.2675%" y="463.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (6 samples, 5.26%)</title><rect x="4.3860%" y="645" width="5.2632%" height="15" fill="rgb(250,213,24)" fg:x="5" fg:w="6"/><text x="4.6360%" y="655.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (3 samples, 2.63%)</title><rect x="7.0175%" y="629" width="2.6316%" height="15" fill="rgb(247,123,22)" fg:x="8" fg:w="3"/><text x="7.2675%" y="639.50">dy..</text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 2.63%)</title><rect x="7.0175%" y="613" width="2.6316%" height="15" fill="rgb(231,138,38)" fg:x="8" fg:w="3"/><text x="7.2675%" y="623.50">dy..</text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (3 samples, 2.63%)</title><rect x="7.0175%" y="597" width="2.6316%" height="15" fill="rgb(231,145,46)" fg:x="8" fg:w="3"/><text x="7.2675%" y="607.50">dy..</text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 2.63%)</title><rect x="7.0175%" y="581" width="2.6316%" height="15" fill="rgb(251,118,11)" fg:x="8" fg:w="3"/><text x="7.2675%" y="591.50">ma..</text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (3 samples, 2.63%)</title><rect x="7.0175%" y="565" width="2.6316%" height="15" fill="rgb(217,147,25)" fg:x="8" fg:w="3"/><text x="7.2675%" y="575.50">ma..</text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (3 samples, 2.63%)</title><rect x="7.0175%" y="549" width="2.6316%" height="15" fill="rgb(247,81,37)" fg:x="8" fg:w="3"/><text x="7.2675%" y="559.50">in..</text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (3 samples, 2.63%)</title><rect x="7.0175%" y="533" width="2.6316%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="3"/><text x="7.2675%" y="543.50">in..</text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (3 samples, 2.63%)</title><rect x="7.0175%" y="517" width="2.6316%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="3"/><text x="7.2675%" y="527.50">in..</text></g><g><title>libSystem_initializer (3 samples, 2.63%)</title><rect x="7.0175%" y="501" width="2.6316%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="3"/><text x="7.2675%" y="511.50">li..</text></g><g><title>libdispatch_init (2 samples, 1.75%)</title><rect x="7.8947%" y="485" width="1.7544%" height="15" fill="rgb(221,10,30)" fg:x="9" fg:w="2"/><text x="8.1447%" y="495.50"></text></g><g><title>_os_object_init (1 samples, 0.88%)</title><rect x="8.7719%" y="469" width="0.8772%" height="15" fill="rgb(210,229,1)" fg:x="10" fg:w="1"/><text x="9.0219%" y="479.50"></text></g><g><title>_objc_init (1 samples, 0.88%)</title><rect x="8.7719%" y="453" width="0.8772%" height="15" fill="rgb(222,148,37)" fg:x="10" fg:w="1"/><text x="9.0219%" y="463.50"></text></g><g><title>_dyld_objc_register_callbacks (1 samples, 0.88%)</title><rect x="8.7719%" y="437" width="0.8772%" height="15" fill="rgb(234,67,33)" fg:x="10" fg:w="1"/><text x="9.0219%" y="447.50"></text></g><g><title>dyld4::APIs::_dyld_objc_register_callbacks(dyld4::ObjCCallbacks const*) (1 samples, 0.88%)</title><rect x="8.7719%" y="421" width="0.8772%" height="15" fill="rgb(247,98,35)" fg:x="10" fg:w="1"/><text x="9.0219%" y="431.50"></text></g><g><title>dyld4::RuntimeState::setObjCNotifiers(dyld4::ReadOnlyCallback&lt;void (*)(char const*, mach_header const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(mach_header const*, void*, mach_header const*, void const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(_dyld_objc_notify_mapped_info const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(unsigned int, _dyld_objc_notify_mapped_info const*, void (unsigned int) block_pointer)&gt;) (1 samples, 0.88%)</title><rect x="8.7719%" y="405" width="0.8772%" height="15" fill="rgb(247,138,52)" fg:x="10" fg:w="1"/><text x="9.0219%" y="415.50"></text></g><g><title>dyld4::RuntimeLocks::withLoadersReadLock(void () block_pointer) (1 samples, 0.88%)</title><rect x="8.7719%" y="389" width="0.8772%" height="15" fill="rgb(213,79,30)" fg:x="10" fg:w="1"/><text x="9.0219%" y="399.50"></text></g><g><title>invocation function for block in dyld4::RuntimeState::setObjCNotifiers(dyld4::ReadOnlyCallback&lt;void (*)(char const*, mach_header const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(mach_header const*, void*, mach_header const*, void const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(_dyld_objc_notify_mapped_info const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(unsigned int, _dyld_objc_notify_mapped_info const*, void (unsigned int) block_pointer)&gt;)::$_0::operator()() const (1 samples, 0.88%)</title><rect x="8.7719%" y="373" width="0.8772%" height="15" fill="rgb(246,177,23)" fg:x="10" fg:w="1"/><text x="9.0219%" y="383.50"></text></g><g><title>map_images (1 samples, 0.88%)</title><rect x="8.7719%" y="357" width="0.8772%" height="15" fill="rgb(230,62,27)" fg:x="10" fg:w="1"/><text x="9.0219%" y="367.50"></text></g><g><title>map_images_nolock (1 samples, 0.88%)</title><rect x="8.7719%" y="341" width="0.8772%" height="15" fill="rgb(216,154,8)" fg:x="10" fg:w="1"/><text x="9.0219%" y="351.50"></text></g><g><title>arc4random_buf (1 samples, 0.88%)</title><rect x="8.7719%" y="325" width="0.8772%" height="15" fill="rgb(244,35,45)" fg:x="10" fg:w="1"/><text x="9.0219%" y="335.50"></text></g><g><title>arc4_init (1 samples, 0.88%)</title><rect x="8.7719%" y="309" width="0.8772%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="1"/><text x="9.0219%" y="319.50"></text></g><g><title>ccrng (1 samples, 0.88%)</title><rect x="8.7719%" y="293" width="0.8772%" height="15" fill="rgb(240,54,50)" fg:x="10" fg:w="1"/><text x="9.0219%" y="303.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (1 samples, 0.88%)</title><rect x="8.7719%" y="277" width="0.8772%" height="15" fill="rgb(233,84,52)" fg:x="10" fg:w="1"/><text x="9.0219%" y="287.50"></text></g><g><title>_os_once_callout (1 samples, 0.88%)</title><rect x="8.7719%" y="261" width="0.8772%" height="15" fill="rgb(207,117,47)" fg:x="10" fg:w="1"/><text x="9.0219%" y="271.50"></text></g><g><title>init (1 samples, 0.88%)</title><rect x="8.7719%" y="245" width="0.8772%" height="15" fill="rgb(249,43,39)" fg:x="10" fg:w="1"/><text x="9.0219%" y="255.50"></text></g><g><title>ccrng_process_init (1 samples, 0.88%)</title><rect x="8.7719%" y="229" width="0.8772%" height="15" fill="rgb(209,38,44)" fg:x="10" fg:w="1"/><text x="9.0219%" y="239.50"></text></g><g><title>ccrng_schedule_timer_init (1 samples, 0.88%)</title><rect x="8.7719%" y="213" width="0.8772%" height="15" fill="rgb(236,212,23)" fg:x="10" fg:w="1"/><text x="9.0219%" y="223.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (9 samples, 7.89%)</title><rect x="2.6316%" y="677" width="7.8947%" height="15" fill="rgb(242,79,21)" fg:x="3" fg:w="9"/><text x="2.8816%" y="687.50">dyld4::star..</text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (9 samples, 7.89%)</title><rect x="2.6316%" y="661" width="7.8947%" height="15" fill="rgb(211,96,35)" fg:x="3" fg:w="9"/><text x="2.8816%" y="671.50">dyld4::prep..</text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="645" width="0.8772%" height="15" fill="rgb(253,215,40)" fg:x="11" fg:w="1"/><text x="9.8991%" y="655.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="629" width="0.8772%" height="15" fill="rgb(211,81,21)" fg:x="11" fg:w="1"/><text x="9.8991%" y="639.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="613" width="0.8772%" height="15" fill="rgb(208,190,38)" fg:x="11" fg:w="1"/><text x="9.8991%" y="623.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="597" width="0.8772%" height="15" fill="rgb(235,213,38)" fg:x="11" fg:w="1"/><text x="9.8991%" y="607.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="581" width="0.8772%" height="15" fill="rgb(237,122,38)" fg:x="11" fg:w="1"/><text x="9.8991%" y="591.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="565" width="0.8772%" height="15" fill="rgb(244,218,35)" fg:x="11" fg:w="1"/><text x="9.8991%" y="575.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="549" width="0.8772%" height="15" fill="rgb(240,68,47)" fg:x="11" fg:w="1"/><text x="9.8991%" y="559.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="533" width="0.8772%" height="15" fill="rgb(210,16,53)" fg:x="11" fg:w="1"/><text x="9.8991%" y="543.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="517" width="0.8772%" height="15" fill="rgb(235,124,12)" fg:x="11" fg:w="1"/><text x="9.8991%" y="527.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="501" width="0.8772%" height="15" fill="rgb(224,169,11)" fg:x="11" fg:w="1"/><text x="9.8991%" y="511.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="485" width="0.8772%" height="15" fill="rgb(250,166,2)" fg:x="11" fg:w="1"/><text x="9.8991%" y="495.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="469" width="0.8772%" height="15" fill="rgb(242,216,29)" fg:x="11" fg:w="1"/><text x="9.8991%" y="479.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="453" width="0.8772%" height="15" fill="rgb(230,116,27)" fg:x="11" fg:w="1"/><text x="9.8991%" y="463.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="437" width="0.8772%" height="15" fill="rgb(228,99,48)" fg:x="11" fg:w="1"/><text x="9.8991%" y="447.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="421" width="0.8772%" height="15" fill="rgb(253,11,6)" fg:x="11" fg:w="1"/><text x="9.8991%" y="431.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="405" width="0.8772%" height="15" fill="rgb(247,143,39)" fg:x="11" fg:w="1"/><text x="9.8991%" y="415.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="389" width="0.8772%" height="15" fill="rgb(236,97,10)" fg:x="11" fg:w="1"/><text x="9.8991%" y="399.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="373" width="0.8772%" height="15" fill="rgb(233,208,19)" fg:x="11" fg:w="1"/><text x="9.8991%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="357" width="0.8772%" height="15" fill="rgb(216,164,2)" fg:x="11" fg:w="1"/><text x="9.8991%" y="367.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="341" width="0.8772%" height="15" fill="rgb(220,129,5)" fg:x="11" fg:w="1"/><text x="9.8991%" y="351.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="325" width="0.8772%" height="15" fill="rgb(242,17,10)" fg:x="11" fg:w="1"/><text x="9.8991%" y="335.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="309" width="0.8772%" height="15" fill="rgb(242,107,0)" fg:x="11" fg:w="1"/><text x="9.8991%" y="319.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="293" width="0.8772%" height="15" fill="rgb(251,28,31)" fg:x="11" fg:w="1"/><text x="9.8991%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="277" width="0.8772%" height="15" fill="rgb(233,223,10)" fg:x="11" fg:w="1"/><text x="9.8991%" y="287.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="261" width="0.8772%" height="15" fill="rgb(215,21,27)" fg:x="11" fg:w="1"/><text x="9.8991%" y="271.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="245" width="0.8772%" height="15" fill="rgb(232,23,21)" fg:x="11" fg:w="1"/><text x="9.8991%" y="255.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="229" width="0.8772%" height="15" fill="rgb(244,5,23)" fg:x="11" fg:w="1"/><text x="9.8991%" y="239.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="213" width="0.8772%" height="15" fill="rgb(226,81,46)" fg:x="11" fg:w="1"/><text x="9.8991%" y="223.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="197" width="0.8772%" height="15" fill="rgb(247,70,30)" fg:x="11" fg:w="1"/><text x="9.8991%" y="207.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="181" width="0.8772%" height="15" fill="rgb(212,68,19)" fg:x="11" fg:w="1"/><text x="9.8991%" y="191.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="165" width="0.8772%" height="15" fill="rgb(240,187,13)" fg:x="11" fg:w="1"/><text x="9.8991%" y="175.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="149" width="0.8772%" height="15" fill="rgb(223,113,26)" fg:x="11" fg:w="1"/><text x="9.8991%" y="159.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="133" width="0.8772%" height="15" fill="rgb(206,192,2)" fg:x="11" fg:w="1"/><text x="9.8991%" y="143.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="117" width="0.8772%" height="15" fill="rgb(241,108,4)" fg:x="11" fg:w="1"/><text x="9.8991%" y="127.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="101" width="0.8772%" height="15" fill="rgb(247,173,49)" fg:x="11" fg:w="1"/><text x="9.8991%" y="111.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="85" width="0.8772%" height="15" fill="rgb(224,114,35)" fg:x="11" fg:w="1"/><text x="9.8991%" y="95.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="69" width="0.8772%" height="15" fill="rgb(245,159,27)" fg:x="11" fg:w="1"/><text x="9.8991%" y="79.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.88%)</title><rect x="9.6491%" y="53" width="0.8772%" height="15" fill="rgb(245,172,44)" fg:x="11" fg:w="1"/><text x="9.8991%" y="63.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.88%)</title><rect x="9.6491%" y="37" width="0.8772%" height="15" fill="rgb(236,23,11)" fg:x="11" fg:w="1"/><text x="9.8991%" y="47.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.88%)</title><rect x="10.5263%" y="629" width="0.8772%" height="15" fill="rgb(205,117,38)" fg:x="12" fg:w="1"/><text x="10.7763%" y="639.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.88%)</title><rect x="10.5263%" y="613" width="0.8772%" height="15" fill="rgb(237,72,25)" fg:x="12" fg:w="1"/><text x="10.7763%" y="623.50"></text></g><g><title>write (1 samples, 0.88%)</title><rect x="10.5263%" y="597" width="0.8772%" height="15" fill="rgb(244,70,9)" fg:x="12" fg:w="1"/><text x="10.7763%" y="607.50"></text></g><g><title>_free (1 samples, 0.88%)</title><rect x="11.4035%" y="629" width="0.8772%" height="15" fill="rgb(217,125,39)" fg:x="13" fg:w="1"/><text x="11.6535%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.88%)</title><rect x="12.2807%" y="549" width="0.8772%" height="15" fill="rgb(235,36,10)" fg:x="14" fg:w="1"/><text x="12.5307%" y="559.50"></text></g><g><title>&lt;chrono::format::formatting::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.88%)</title><rect x="13.1579%" y="549" width="0.8772%" height="15" fill="rgb(251,123,47)" fg:x="15" fg:w="1"/><text x="13.4079%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.88%)</title><rect x="13.1579%" y="533" width="0.8772%" height="15" fill="rgb(221,13,13)" fg:x="15" fg:w="1"/><text x="13.4079%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.88%)</title><rect x="13.1579%" y="517" width="0.8772%" height="15" fill="rgb(238,131,9)" fg:x="15" fg:w="1"/><text x="13.4079%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.88%)</title><rect x="13.1579%" y="501" width="0.8772%" height="15" fill="rgb(211,50,8)" fg:x="15" fg:w="1"/><text x="13.4079%" y="511.50"></text></g><g><title>nanov2_malloc_type (1 samples, 0.88%)</title><rect x="13.1579%" y="485" width="0.8772%" height="15" fill="rgb(245,182,24)" fg:x="15" fg:w="1"/><text x="13.4079%" y="495.50"></text></g><g><title>&lt;chrono::naive::time::NaiveTime as core::fmt::Debug&gt;::fmt (1 samples, 0.88%)</title><rect x="14.0351%" y="549" width="0.8772%" height="15" fill="rgb(242,14,37)" fg:x="16" fg:w="1"/><text x="14.2851%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.88%)</title><rect x="14.0351%" y="533" width="0.8772%" height="15" fill="rgb(246,228,12)" fg:x="16" fg:w="1"/><text x="14.2851%" y="543.50"></text></g><g><title>core::fmt::num::imp::_&lt;impl u32&gt;::_fmt (1 samples, 0.88%)</title><rect x="14.0351%" y="517" width="0.8772%" height="15" fill="rgb(213,55,15)" fg:x="16" fg:w="1"/><text x="14.2851%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.88%)</title><rect x="14.0351%" y="501" width="0.8772%" height="15" fill="rgb(209,9,3)" fg:x="16" fg:w="1"/><text x="14.2851%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.88%)</title><rect x="14.0351%" y="485" width="0.8772%" height="15" fill="rgb(230,59,30)" fg:x="16" fg:w="1"/><text x="14.2851%" y="495.50"></text></g><g><title>std::sys::alloc::unix::_&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.88%)</title><rect x="14.0351%" y="469" width="0.8772%" height="15" fill="rgb(209,121,21)" fg:x="16" fg:w="1"/><text x="14.2851%" y="479.50"></text></g><g><title>_realloc (1 samples, 0.88%)</title><rect x="14.0351%" y="453" width="0.8772%" height="15" fill="rgb(220,109,13)" fg:x="16" fg:w="1"/><text x="14.2851%" y="463.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.88%)</title><rect x="14.0351%" y="437" width="0.8772%" height="15" fill="rgb(232,18,1)" fg:x="16" fg:w="1"/><text x="14.2851%" y="447.50"></text></g><g><title>nanov2_realloc (1 samples, 0.88%)</title><rect x="14.0351%" y="421" width="0.8772%" height="15" fill="rgb(215,41,42)" fg:x="16" fg:w="1"/><text x="14.2851%" y="431.50"></text></g><g><title>_nanov2_free (1 samples, 0.88%)</title><rect x="14.0351%" y="405" width="0.8772%" height="15" fill="rgb(224,123,36)" fg:x="16" fg:w="1"/><text x="14.2851%" y="415.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1 samples, 0.88%)</title><rect x="14.0351%" y="389" width="0.8772%" height="15" fill="rgb(240,125,3)" fg:x="16" fg:w="1"/><text x="14.2851%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (1 samples, 0.88%)</title><rect x="14.9123%" y="533" width="0.8772%" height="15" fill="rgb(205,98,50)" fg:x="17" fg:w="1"/><text x="15.1623%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1 samples, 0.88%)</title><rect x="15.7895%" y="533" width="0.8772%" height="15" fill="rgb(205,185,37)" fg:x="18" fg:w="1"/><text x="16.0395%" y="543.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (3 samples, 2.63%)</title><rect x="14.9123%" y="549" width="2.6316%" height="15" fill="rgb(238,207,15)" fg:x="17" fg:w="3"/><text x="15.1623%" y="559.50">&lt;c..</text></g><g><title>core::char::methods::len_utf8 (1 samples, 0.88%)</title><rect x="16.6667%" y="533" width="0.8772%" height="15" fill="rgb(213,199,42)" fg:x="19" fg:w="1"/><text x="16.9167%" y="543.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 1.75%)</title><rect x="17.5439%" y="549" width="1.7544%" height="15" fill="rgb(235,201,11)" fg:x="20" fg:w="2"/><text x="17.7939%" y="559.50"></text></g><g><title>_nanov2_free (3 samples, 2.63%)</title><rect x="20.1754%" y="453" width="2.6316%" height="15" fill="rgb(207,46,11)" fg:x="23" fg:w="3"/><text x="20.4254%" y="463.50">_n..</text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.88%)</title><rect x="22.8070%" y="453" width="0.8772%" height="15" fill="rgb(241,35,35)" fg:x="26" fg:w="1"/><text x="23.0570%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (6 samples, 5.26%)</title><rect x="19.2982%" y="549" width="5.2632%" height="15" fill="rgb(243,32,47)" fg:x="22" fg:w="6"/><text x="19.5482%" y="559.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (6 samples, 5.26%)</title><rect x="19.2982%" y="533" width="5.2632%" height="15" fill="rgb(247,202,23)" fg:x="22" fg:w="6"/><text x="19.5482%" y="543.50">alloc:..</text></g><g><title>std::sys::alloc::unix::_&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6 samples, 5.26%)</title><rect x="19.2982%" y="517" width="5.2632%" height="15" fill="rgb(219,102,11)" fg:x="22" fg:w="6"/><text x="19.5482%" y="527.50">std::s..</text></g><g><title>_realloc (6 samples, 5.26%)</title><rect x="19.2982%" y="501" width="5.2632%" height="15" fill="rgb(243,110,44)" fg:x="22" fg:w="6"/><text x="19.5482%" y="511.50">_reall..</text></g><g><title>_malloc_zone_realloc (6 samples, 5.26%)</title><rect x="19.2982%" y="485" width="5.2632%" height="15" fill="rgb(222,74,54)" fg:x="22" fg:w="6"/><text x="19.5482%" y="495.50">_mallo..</text></g><g><title>nanov2_realloc (6 samples, 5.26%)</title><rect x="19.2982%" y="469" width="5.2632%" height="15" fill="rgb(216,99,12)" fg:x="22" fg:w="6"/><text x="19.5482%" y="479.50">nanov2..</text></g><g><title>nanov2_malloc (1 samples, 0.88%)</title><rect x="23.6842%" y="453" width="0.8772%" height="15" fill="rgb(226,22,26)" fg:x="27" fg:w="1"/><text x="23.9342%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (16 samples, 14.04%)</title><rect x="12.2807%" y="565" width="14.0351%" height="15" fill="rgb(217,163,10)" fg:x="14" fg:w="16"/><text x="12.5307%" y="575.50">core::fmt::rt::Argume..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 1.75%)</title><rect x="24.5614%" y="549" width="1.7544%" height="15" fill="rgb(213,25,53)" fg:x="28" fg:w="2"/><text x="24.8114%" y="559.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (2 samples, 1.75%)</title><rect x="24.5614%" y="533" width="1.7544%" height="15" fill="rgb(252,105,26)" fg:x="28" fg:w="2"/><text x="24.8114%" y="543.50"></text></g><g><title>nanov2_pointer_size (1 samples, 0.88%)</title><rect x="26.3158%" y="469" width="0.8772%" height="15" fill="rgb(220,39,43)" fg:x="30" fg:w="1"/><text x="26.5658%" y="479.50"></text></g><g><title>_realloc (3 samples, 2.63%)</title><rect x="26.3158%" y="501" width="2.6316%" height="15" fill="rgb(229,68,48)" fg:x="30" fg:w="3"/><text x="26.5658%" y="511.50">_r..</text></g><g><title>_malloc_zone_realloc (3 samples, 2.63%)</title><rect x="26.3158%" y="485" width="2.6316%" height="15" fill="rgb(252,8,32)" fg:x="30" fg:w="3"/><text x="26.5658%" y="495.50">_m..</text></g><g><title>nanov2_realloc (2 samples, 1.75%)</title><rect x="27.1930%" y="469" width="1.7544%" height="15" fill="rgb(223,20,43)" fg:x="31" fg:w="2"/><text x="27.4430%" y="479.50"></text></g><g><title>_nanov2_free (2 samples, 1.75%)</title><rect x="27.1930%" y="453" width="1.7544%" height="15" fill="rgb(229,81,49)" fg:x="31" fg:w="2"/><text x="27.4430%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (20 samples, 17.54%)</title><rect x="12.2807%" y="613" width="17.5439%" height="15" fill="rgb(236,28,36)" fg:x="14" fg:w="20"/><text x="12.5307%" y="623.50">&lt;&amp;mut W as core::fmt::Write..</text></g><g><title>core::fmt::rt::Argument::fmt (20 samples, 17.54%)</title><rect x="12.2807%" y="597" width="17.5439%" height="15" fill="rgb(249,185,26)" fg:x="14" fg:w="20"/><text x="12.5307%" y="607.50">core::fmt::rt::Argument::fmt</text></g><g><title>core::fmt::Formatter::write_fmt (20 samples, 17.54%)</title><rect x="12.2807%" y="581" width="17.5439%" height="15" fill="rgb(249,174,33)" fg:x="14" fg:w="20"/><text x="12.5307%" y="591.50">core::fmt::Formatter::write..</text></g><g><title>core::fmt::write (4 samples, 3.51%)</title><rect x="26.3158%" y="565" width="3.5088%" height="15" fill="rgb(233,201,37)" fg:x="30" fg:w="4"/><text x="26.5658%" y="575.50">cor..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (4 samples, 3.51%)</title><rect x="26.3158%" y="549" width="3.5088%" height="15" fill="rgb(221,78,26)" fg:x="30" fg:w="4"/><text x="26.5658%" y="559.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4 samples, 3.51%)</title><rect x="26.3158%" y="533" width="3.5088%" height="15" fill="rgb(250,127,30)" fg:x="30" fg:w="4"/><text x="26.5658%" y="543.50">all..</text></g><g><title>std::sys::alloc::unix::_&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4 samples, 3.51%)</title><rect x="26.3158%" y="517" width="3.5088%" height="15" fill="rgb(230,49,44)" fg:x="30" fg:w="4"/><text x="26.5658%" y="527.50">std..</text></g><g><title>nanov2_size (1 samples, 0.88%)</title><rect x="28.9474%" y="501" width="0.8772%" height="15" fill="rgb(229,67,23)" fg:x="33" fg:w="1"/><text x="29.1974%" y="511.50"></text></g><g><title>alloc::fmt::format::_{{closure}} (21 samples, 18.42%)</title><rect x="12.2807%" y="629" width="18.4211%" height="15" fill="rgb(249,83,47)" fg:x="14" fg:w="21"/><text x="12.5307%" y="639.50">alloc::fmt::format::_{{closur..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.88%)</title><rect x="29.8246%" y="613" width="0.8772%" height="15" fill="rgb(215,43,3)" fg:x="34" fg:w="1"/><text x="30.0746%" y="623.50"></text></g><g><title>core::ptr::read (1 samples, 0.88%)</title><rect x="30.7018%" y="629" width="0.8772%" height="15" fill="rgb(238,154,13)" fg:x="35" fg:w="1"/><text x="30.9518%" y="639.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.88%)</title><rect x="32.4561%" y="613" width="0.8772%" height="15" fill="rgb(219,56,2)" fg:x="37" fg:w="1"/><text x="32.7061%" y="623.50"></text></g><g><title>_nanov2_free (1 samples, 0.88%)</title><rect x="33.3333%" y="597" width="0.8772%" height="15" fill="rgb(233,0,4)" fg:x="38" fg:w="1"/><text x="33.5833%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.88%)</title><rect x="35.0877%" y="565" width="0.8772%" height="15" fill="rgb(235,30,7)" fg:x="40" fg:w="1"/><text x="35.3377%" y="575.50"></text></g><g><title>nanov2_malloc_type (1 samples, 0.88%)</title><rect x="35.0877%" y="549" width="0.8772%" height="15" fill="rgb(250,79,13)" fg:x="40" fg:w="1"/><text x="35.3377%" y="559.50"></text></g><g><title>_nanov2_free (3 samples, 2.63%)</title><rect x="36.8421%" y="501" width="2.6316%" height="15" fill="rgb(211,146,34)" fg:x="42" fg:w="3"/><text x="37.0921%" y="511.50">_n..</text></g><g><title>_platform_memmove$VARIANT$Haswell (2 samples, 1.75%)</title><rect x="39.4737%" y="501" width="1.7544%" height="15" fill="rgb(228,22,38)" fg:x="45" fg:w="2"/><text x="39.7237%" y="511.50"></text></g><g><title>_realloc (11 samples, 9.65%)</title><rect x="35.9649%" y="549" width="9.6491%" height="15" fill="rgb(235,168,5)" fg:x="41" fg:w="11"/><text x="36.2149%" y="559.50">_realloc</text></g><g><title>_malloc_zone_realloc (11 samples, 9.65%)</title><rect x="35.9649%" y="533" width="9.6491%" height="15" fill="rgb(221,155,16)" fg:x="41" fg:w="11"/><text x="36.2149%" y="543.50">_malloc_zone_r..</text></g><g><title>nanov2_realloc (11 samples, 9.65%)</title><rect x="35.9649%" y="517" width="9.6491%" height="15" fill="rgb(215,215,53)" fg:x="41" fg:w="11"/><text x="36.2149%" y="527.50">nanov2_realloc</text></g><g><title>nanov2_malloc (5 samples, 4.39%)</title><rect x="41.2281%" y="501" width="4.3860%" height="15" fill="rgb(223,4,10)" fg:x="47" fg:w="5"/><text x="41.4781%" y="511.50">nanov..</text></g><g><title>nanov2_allocate_outlined (3 samples, 2.63%)</title><rect x="42.9825%" y="485" width="2.6316%" height="15" fill="rgb(234,103,6)" fg:x="49" fg:w="3"/><text x="43.2325%" y="495.50">na..</text></g><g><title>nanov2_find_block_and_allocate (3 samples, 2.63%)</title><rect x="42.9825%" y="469" width="2.6316%" height="15" fill="rgb(227,97,0)" fg:x="49" fg:w="3"/><text x="43.2325%" y="479.50">na..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 12.28%)</title><rect x="34.2105%" y="597" width="12.2807%" height="15" fill="rgb(234,150,53)" fg:x="39" fg:w="14"/><text x="34.4605%" y="607.50">alloc::vec::Vec&lt;T,..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (13 samples, 11.40%)</title><rect x="35.0877%" y="581" width="11.4035%" height="15" fill="rgb(228,201,54)" fg:x="40" fg:w="13"/><text x="35.3377%" y="591.50">alloc::raw_vec::R..</text></g><g><title>std::sys::alloc::unix::_&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (12 samples, 10.53%)</title><rect x="35.9649%" y="565" width="10.5263%" height="15" fill="rgb(222,22,37)" fg:x="41" fg:w="12"/><text x="36.2149%" y="575.50">std::sys::alloc..</text></g><g><title>nanov2_size (1 samples, 0.88%)</title><rect x="45.6140%" y="549" width="0.8772%" height="15" fill="rgb(237,53,32)" fg:x="52" fg:w="1"/><text x="45.8640%" y="559.50"></text></g><g><title>&lt;packet::QuotePacket as core::convert::TryFrom&lt;packet::PacketDataWithTime&gt;&gt;::try_from (18 samples, 15.79%)</title><rect x="33.3333%" y="613" width="15.7895%" height="15" fill="rgb(233,25,53)" fg:x="38" fg:w="18"/><text x="33.5833%" y="623.50">&lt;packet::QuotePacket as ..</text></g><g><title>std::sys::alloc::unix::_&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 2.63%)</title><rect x="46.4912%" y="597" width="2.6316%" height="15" fill="rgb(210,40,34)" fg:x="53" fg:w="3"/><text x="46.7412%" y="607.50">st..</text></g><g><title>_nanov2_free (3 samples, 2.63%)</title><rect x="46.4912%" y="581" width="2.6316%" height="15" fill="rgb(241,220,44)" fg:x="53" fg:w="3"/><text x="46.7412%" y="591.50">_n..</text></g><g><title>_malloc_zone_malloc (1 samples, 0.88%)</title><rect x="49.1228%" y="613" width="0.8772%" height="15" fill="rgb(235,28,35)" fg:x="56" fg:w="1"/><text x="49.3728%" y="623.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 3.51%)</title><rect x="50.0000%" y="613" width="3.5088%" height="15" fill="rgb(210,56,17)" fg:x="57" fg:w="4"/><text x="50.2500%" y="623.50">all..</text></g><g><title>nanov2_malloc_type (4 samples, 3.51%)</title><rect x="50.0000%" y="597" width="3.5088%" height="15" fill="rgb(224,130,29)" fg:x="57" fg:w="4"/><text x="50.2500%" y="607.50">nan..</text></g><g><title>alloc::fmt::format::_{{closure}} (1 samples, 0.88%)</title><rect x="53.5088%" y="613" width="0.8772%" height="15" fill="rgb(235,212,8)" fg:x="61" fg:w="1"/><text x="53.7588%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (1 samples, 0.88%)</title><rect x="53.5088%" y="597" width="0.8772%" height="15" fill="rgb(223,33,50)" fg:x="61" fg:w="1"/><text x="53.7588%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.88%)</title><rect x="53.5088%" y="581" width="0.8772%" height="15" fill="rgb(219,149,13)" fg:x="61" fg:w="1"/><text x="53.7588%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.88%)</title><rect x="53.5088%" y="565" width="0.8772%" height="15" fill="rgb(250,156,29)" fg:x="61" fg:w="1"/><text x="53.7588%" y="575.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1 samples, 0.88%)</title><rect x="53.5088%" y="549" width="0.8772%" height="15" fill="rgb(216,193,19)" fg:x="61" fg:w="1"/><text x="53.7588%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.88%)</title><rect x="54.3860%" y="613" width="0.8772%" height="15" fill="rgb(216,135,14)" fg:x="62" fg:w="1"/><text x="54.6360%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.88%)</title><rect x="55.2632%" y="597" width="0.8772%" height="15" fill="rgb(241,47,5)" fg:x="63" fg:w="1"/><text x="55.5132%" y="607.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.88%)</title><rect x="56.1404%" y="597" width="0.8772%" height="15" fill="rgb(233,42,35)" fg:x="64" fg:w="1"/><text x="56.3904%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 14.91%)</title><rect x="55.2632%" y="613" width="14.9123%" height="15" fill="rgb(231,13,6)" fg:x="63" fg:w="17"/><text x="55.5132%" y="623.50">alloc::slice::hack::to_..</text></g><g><title>std::sys::alloc::unix::_&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (15 samples, 13.16%)</title><rect x="57.0175%" y="597" width="13.1579%" height="15" fill="rgb(207,181,40)" fg:x="65" fg:w="15"/><text x="57.2675%" y="607.50">std::sys::alloc::uni..</text></g><g><title>nanov2_malloc_type (15 samples, 13.16%)</title><rect x="57.0175%" y="581" width="13.1579%" height="15" fill="rgb(254,173,49)" fg:x="65" fg:w="15"/><text x="57.2675%" y="591.50">nanov2_malloc_type</text></g><g><title>nanov2_allocate_outlined (1 samples, 0.88%)</title><rect x="69.2982%" y="565" width="0.8772%" height="15" fill="rgb(221,1,38)" fg:x="79" fg:w="1"/><text x="69.5482%" y="575.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (1 samples, 0.88%)</title><rect x="70.1754%" y="613" width="0.8772%" height="15" fill="rgb(206,124,46)" fg:x="80" fg:w="1"/><text x="70.4254%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.88%)</title><rect x="71.0526%" y="597" width="0.8772%" height="15" fill="rgb(249,21,11)" fg:x="81" fg:w="1"/><text x="71.3026%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 1.75%)</title><rect x="71.9298%" y="581" width="1.7544%" height="15" fill="rgb(222,201,40)" fg:x="82" fg:w="2"/><text x="72.1798%" y="591.50"></text></g><g><title>nanov2_malloc_type (2 samples, 1.75%)</title><rect x="71.9298%" y="565" width="1.7544%" height="15" fill="rgb(235,61,29)" fg:x="82" fg:w="2"/><text x="72.1798%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 3.51%)</title><rect x="71.0526%" y="613" width="3.5088%" height="15" fill="rgb(219,207,3)" fg:x="81" fg:w="4"/><text x="71.3026%" y="623.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3 samples, 2.63%)</title><rect x="71.9298%" y="597" width="2.6316%" height="15" fill="rgb(222,56,46)" fg:x="82" fg:w="3"/><text x="72.1798%" y="607.50">al..</text></g><g><title>std::sys::alloc::unix::_&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.88%)</title><rect x="73.6842%" y="581" width="0.8772%" height="15" fill="rgb(239,76,54)" fg:x="84" fg:w="1"/><text x="73.9342%" y="591.50"></text></g><g><title>nanov2_size (1 samples, 0.88%)</title><rect x="73.6842%" y="565" width="0.8772%" height="15" fill="rgb(231,124,27)" fg:x="84" fg:w="1"/><text x="73.9342%" y="575.50"></text></g><g><title>core::ptr::write (1 samples, 0.88%)</title><rect x="74.5614%" y="613" width="0.8772%" height="15" fill="rgb(249,195,6)" fg:x="85" fg:w="1"/><text x="74.8114%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.88%)</title><rect x="75.4386%" y="613" width="0.8772%" height="15" fill="rgb(237,174,47)" fg:x="86" fg:w="1"/><text x="75.6886%" y="623.50"></text></g><g><title>free (1 samples, 0.88%)</title><rect x="76.3158%" y="613" width="0.8772%" height="15" fill="rgb(206,201,31)" fg:x="87" fg:w="1"/><text x="76.5658%" y="623.50"></text></g><g><title>packet::read_pcap_file (1 samples, 0.88%)</title><rect x="77.1930%" y="613" width="0.8772%" height="15" fill="rgb(231,57,52)" fg:x="88" fg:w="1"/><text x="77.4430%" y="623.50"></text></g><g><title>read (1 samples, 0.88%)</title><rect x="77.1930%" y="597" width="0.8772%" height="15" fill="rgb(248,177,22)" fg:x="88" fg:w="1"/><text x="77.4430%" y="607.50"></text></g><g><title>read (1 samples, 0.88%)</title><rect x="78.0702%" y="613" width="0.8772%" height="15" fill="rgb(215,211,37)" fg:x="89" fg:w="1"/><text x="78.3202%" y="623.50"></text></g><g><title>std::sys::alloc::unix::_&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.88%)</title><rect x="78.9474%" y="613" width="0.8772%" height="15" fill="rgb(241,128,51)" fg:x="90" fg:w="1"/><text x="79.1974%" y="623.50"></text></g><g><title>nanov2_malloc_type (1 samples, 0.88%)</title><rect x="78.9474%" y="597" width="0.8772%" height="15" fill="rgb(227,165,31)" fg:x="90" fg:w="1"/><text x="79.1974%" y="607.50"></text></g><g><title>_nanov2_free (18 samples, 15.79%)</title><rect x="79.8246%" y="597" width="15.7895%" height="15" fill="rgb(228,167,24)" fg:x="91" fg:w="18"/><text x="80.0746%" y="607.50">_nanov2_free</text></g><g><title>kopsi_200_pcap_parser::runner (77 samples, 67.54%)</title><rect x="31.5789%" y="629" width="67.5439%" height="15" fill="rgb(228,143,12)" fg:x="36" fg:w="77"/><text x="31.8289%" y="639.50">kopsi_200_pcap_parser::runner</text></g><g><title>std::sys::alloc::unix::_&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (22 samples, 19.30%)</title><rect x="79.8246%" y="613" width="19.2982%" height="15" fill="rgb(249,149,8)" fg:x="91" fg:w="22"/><text x="80.0746%" y="623.50">std::sys::alloc::unix::_&lt;impl ..</text></g><g><title>nanov2_madvise_block (4 samples, 3.51%)</title><rect x="95.6140%" y="597" width="3.5088%" height="15" fill="rgb(243,35,44)" fg:x="109" fg:w="4"/><text x="95.8640%" y="607.50">nan..</text></g><g><title>nanov2_madvise_block_locked (4 samples, 3.51%)</title><rect x="95.6140%" y="581" width="3.5088%" height="15" fill="rgb(246,89,9)" fg:x="109" fg:w="4"/><text x="95.8640%" y="591.50">nan..</text></g><g><title>mvm_madvise_free (4 samples, 3.51%)</title><rect x="95.6140%" y="565" width="3.5088%" height="15" fill="rgb(233,213,13)" fg:x="109" fg:w="4"/><text x="95.8640%" y="575.50">mvm..</text></g><g><title>mvm_madvise_free_plat (4 samples, 3.51%)</title><rect x="95.6140%" y="549" width="3.5088%" height="15" fill="rgb(233,141,41)" fg:x="109" fg:w="4"/><text x="95.8640%" y="559.50">mvm..</text></g><g><title>madvise (4 samples, 3.51%)</title><rect x="95.6140%" y="533" width="3.5088%" height="15" fill="rgb(239,167,4)" fg:x="109" fg:w="4"/><text x="95.8640%" y="543.50">mad..</text></g><g><title>all (114 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(209,217,16)" fg:x="0" fg:w="114"/><text x="0.2500%" y="719.50"></text></g><g><title>start (113 samples, 99.12%)</title><rect x="0.8772%" y="693" width="99.1228%" height="15" fill="rgb(219,88,35)" fg:x="1" fg:w="113"/><text x="1.1272%" y="703.50">start</text></g><g><title>main (102 samples, 89.47%)</title><rect x="10.5263%" y="677" width="89.4737%" height="15" fill="rgb(220,193,23)" fg:x="12" fg:w="102"/><text x="10.7763%" y="687.50">main</text></g><g><title>std::rt::lang_start::_{{closure}} (102 samples, 89.47%)</title><rect x="10.5263%" y="661" width="89.4737%" height="15" fill="rgb(230,90,52)" fg:x="12" fg:w="102"/><text x="10.7763%" y="671.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (102 samples, 89.47%)</title><rect x="10.5263%" y="645" width="89.4737%" height="15" fill="rgb(252,106,19)" fg:x="12" fg:w="102"/><text x="10.7763%" y="655.50">core::ops::function::FnOnce::call_once</text></g><g><title>std::sys::alloc::unix::_&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.88%)</title><rect x="99.1228%" y="629" width="0.8772%" height="15" fill="rgb(206,74,20)" fg:x="113" fg:w="1"/><text x="99.3728%" y="639.50"></text></g><g><title>_nanov2_free (1 samples, 0.88%)</title><rect x="99.1228%" y="613" width="0.8772%" height="15" fill="rgb(230,138,44)" fg:x="113" fg:w="1"/><text x="99.3728%" y="623.50"></text></g></svg></svg>